{"version":3,"sources":["utils/constants.js","utils/loadable.js","pages/HomePage/Loadable.js","pages/BookDetail/Loadable.js","global-styles.js","App.js","api/bookAPI.js","reducers/bookSlice.js","api/reviewAPI.js","reducers/reviewSlice.js","api/commentAPI.js","reducers/commentSlice.js","app/store.js","index.js"],"names":["API_ROOT","loadable","importFunc","fallback","LazyComponent","lazy","props","GlobalStyle","createGlobalStyle","DeviceContext","createContext","App","isMobile","useMediaQuery","useTheme","breakpoints","down","Provider","value","exact","path","component","HomePage","BookDetail","api","this","url","URL","page","sortBy","Promise","resolve","reject","window","fetch","href","method","then","res","json","data","catch","err","id","keyword","getBookForPerPage","createAsyncThunk","a","BookService","response","getBookById","getBookByKeyword","bookSlice","createSlice","name","initialState","books","selectedBook","searchBooks","paging","status","reducers","cleanResult","state","action","activeLoading","stopLoading","extraReducers","builder","addCase","pending","fulfilled","payload","actions","dataToSend","body","JSON","stringify","headers","bookId","createReview","thunkAPI","ReviewService","getReviewById","getReviewByBookId","book_id","reviewSlice","reviews","selectedReview","unshift","createComment","CommentService","getCommentByBookId","localStorage","setItem","commentSlice","comments","store","configureStore","reducer","book","bookReducer","review","reviewReducer","comment","commentReducer","TimeAgo","addDefaultLocale","vn","addLocale","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.506cfe38.chunk.js","sourcesContent":["export const API_ROOT = \"http://localhost:5000\";\n","import React, { lazy, Suspense } from 'react';\n\nconst loadable = (importFunc, { fallback = null } = { fallback: null }) => {\n  const LazyComponent = lazy(importFunc);\n\n  return props => (\n    <Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n\nexport default loadable;\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport loadable from \"../../utils/loadable\";\n\nexport default loadable(() => import(\"./index\"));\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport loadable from \"../../utils/loadable\";\n\nexport default loadable(() => import(\"./index\"));\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    --gutterSm: 0.4rem;\n  --gutterMd: 0.8rem;\n  --gutterLg: 1.6rem;\n  --gutterXl: 2.4rem;\n  --gutterXx: 7.2rem;\n  --colorPrimary400: #7e57c2;\n  --colorPrimary600: #5e35b1;\n  --colorPrimary800: #4527a0;\n  --fontFamily: \"Dosis\", sans-serif;\n  --fontSizeSm: 1.2rem;\n  --fontSizeMd: 1.6rem;\n  --fontSizeLg: 2.1rem;\n  --fontSizeXl: 2.8rem;\n  --fontSizeXx: 3.6rem;\n  --lineHeightSm: 1.1;\n  --lineHeightMd: 1.8;\n  --transitionDuration: 300ms;\n  --transitionTF: cubic-bezier(0.645, 0.045, 0.355, 1);\n\n  /* floated labels */\n  --inputPaddingV: var(--gutterMd);\n  --inputPaddingH: var(--gutterLg);\n  --inputFontSize: var(--fontSizeLg);\n  --inputLineHeight: var(--lineHeightMd);\n  --labelScaleFactor: 0.8;\n  --labelDefaultPosY: 50%;\n  --labelTransformedPosY: calc(\n    (var(--labelDefaultPosY)) -\n    (var(--inputPaddingV) * var(--labelScaleFactor)) -\n    (var(--inputFontSize) * var(--inputLineHeight))\n  );\n  --inputTransitionDuration: var(--transitionDuration);\n  --inputTransitionTF: var(--transitionTF);\n  }\n  body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n\n\n  body {\n    font-family: 'Roboto', sans-serif;\n  }\n\n\n#app {\n  background-color: #fafafa;\n  min-height: 100%;\n  min-width: 100%;\n\n  overflow: auto;\n}\n\n#app::-webkit-scrollbar {\n    display: none;\n  }\n\n .ql-container {\n  border-bottom-left-radius: 0.5em;\n  border-bottom-right-radius: 0.5em;\n  background: #fefcfc;\n}\n\n/* Snow Theme */\n .ql-snow.ql-toolbar {\n  display: block;\n  background: #eaecec;\n  border-top-left-radius: 0.5em;\n  border-top-right-radius: 0.5em;\n}\n\n/* Bubble Theme */\n .ql-bubble .ql-editor {\n  border: 1px solid #ccc;\n  border-radius: 0.5em;\n}\n\n .ql-editor {\n  min-height: 16em;\n  max-height: 32em;\n  overflow: auto;\n  background-color: #fff;\n}\n\n.themeSwitcher {\n  margin-top: 0.5em;\n  font-size: small;\n}\n\n.Overlay {\n  z-index: 999;\n}\n\n\n\n  p,\n  label {\n    line-height: 1.5em;\n\n    font-size: 16px;\n  }\n\n  h1,h2,h3,h4,h5,h6,p {\n    margin: 0;\n    padding: 0;\n\n  }\n`;\n\nexport default GlobalStyle;\n","/**\n *\n * App.js\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n *\n */\n\nimport React, { createContext } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport HomePage from './pages/HomePage/Loadable';\nimport BookDetail from './pages/BookDetail/Loadable';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery } from '@material-ui/core';\n\nimport GlobalStyle from './global-styles';\n\nexport const DeviceContext = createContext();\n\nexport default function App() {\n  const isMobile = useMediaQuery(useTheme().breakpoints.down('sm'));\n  return (\n    <DeviceContext.Provider value={isMobile}>\n      <HashRouter>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/book\" component={BookDetail} />\n      </HashRouter>\n      <GlobalStyle />\n    </DeviceContext.Provider>\n  );\n}\n","import { API_ROOT } from '../utils/constants';\n\nclass BookService {\n  constructor(api) {\n    this.url = new URL(api, API_ROOT);\n  }\n\n  getBookForPerPage(page, sortBy) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}?page=${page}&sortBy=${sortBy}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  getBookById(id) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}/${id}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  getBookByKeyword(keyword) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}/keyword?keyword=${keyword}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n}\n\nexport default new BookService('/v1/books');\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport BookService from '../api/bookAPI';\n\nconst INITIAL_STATE = {\n  books: [],\n  selectedBook: {},\n  searchBooks: [],\n  paging: {},\n  status: '',\n};\n\nexport const getBookForPerPage = createAsyncThunk(\n  'book/fetchBookForPerPage',\n  async ({ page, sortBy }) => {\n    const response = await BookService.getBookForPerPage(page, sortBy);\n    return response;\n  },\n);\n\nexport const getBookById = createAsyncThunk(\n  'book/fetchBookById',\n  async (id) => {\n    const response = await BookService.getBookById(id);\n    return response;\n  },\n);\n\nexport const getBookByKeyword = createAsyncThunk(\n  'book/fetchBookByKeyword',\n  async (keyword) => {\n    const response = await BookService.getBookByKeyword(keyword);\n    return response;\n  },\n);\n\nexport const bookSlice = createSlice({\n  name: 'books',\n  initialState: INITIAL_STATE,\n  reducers: {\n    cleanResult: (state, action) => {\n      state.searchBooks = [];\n    },\n\n    activeLoading: (state) => {\n      state.status = 'loading';\n    },\n\n    stopLoading: (state) => {\n      state.status = 'idle';\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getBookForPerPage.pending, (state) => {})\n      .addCase(getBookForPerPage.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.books = action.payload.data;\n        state.paging = action.payload.paging;\n      })\n      .addCase(getBookById.pending, (state) => {})\n      .addCase(getBookById.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.selectedBook = action.payload.data;\n      })\n      .addCase(getBookByKeyword.pending, (state) => {})\n      .addCase(getBookByKeyword.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.searchBooks = action.payload.data;\n      });\n  },\n});\n\nconst { cleanResult, activeLoading, stopLoading } = bookSlice.actions;\n\nexport { cleanResult, activeLoading, stopLoading };\nexport default bookSlice.reducer;\n","import { API_ROOT } from '../utils/constants';\n\nclass ReviewService {\n  constructor(api) {\n    this.url = new URL(api, API_ROOT);\n  }\n\n  createReview(dataToSend) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(this.url.href, {\n          method: 'POST',\n          body: JSON.stringify(dataToSend),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  getReviewForPerPage(page) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}?page=${page}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  getReviewById(id) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}/${id}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  getReviewByBookId(bookId, page) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}?book_id=${bookId}&page=${page}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n}\n\nexport default new ReviewService('/v1/reviews');\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport ReviewService from '../api/reviewAPI';\n\nconst INITIAL_STATE = {\n  reviews: [],\n  selectedReview: {},\n  paging: {},\n  status: '',\n};\n\nexport const createReview = createAsyncThunk(\n  'review/createReview',\n  async (data, thunkAPI) => {\n    const response = await ReviewService.createReview(data);\n    return response;\n  },\n);\n\nexport const getReviewById = createAsyncThunk(\n  'review/fetchReviewById',\n  async (id) => {\n    const response = await ReviewService.getReviewById(id);\n    return response;\n  },\n);\n\nexport const getReviewByBookId = createAsyncThunk(\n  'review/fetchReviewByBookId',\n  async ({ book_id, page }) => {\n    const response = await ReviewService.getReviewByBookId(book_id, page);\n    return response;\n  },\n);\n\nexport const reviewSlice = createSlice({\n  name: 'reviews',\n  initialState: INITIAL_STATE,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(createReview.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createReview.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.reviews.unshift(action.payload.data);\n      })\n      .addCase(getReviewByBookId.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getReviewByBookId.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.reviews = action.payload.data;\n        state.paging = action.payload.paging;\n      })\n      .addCase(getReviewById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getReviewById.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.selectedReview = action.payload.data;\n      });\n  },\n});\n\nexport default reviewSlice.reducer;\n","import { API_ROOT } from '../utils/constants';\n\nclass CommentService {\n  constructor(api) {\n    this.url = new URL(api, API_ROOT);\n  }\n\n  createComment(dataToSend) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(this.url.href, {\n          method: 'POST',\n          body: JSON.stringify(dataToSend),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  getCommentByBookId(bookId) {\n    return new Promise((resolve, reject) => {\n      window\n        .fetch(`${this.url.href}?book_id=${bookId}`, {\n          method: 'GET',\n        })\n        .then((res) => res.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n}\n\nexport default new CommentService('/v1/comments');\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport CommentService from '../api/commentAPI';\n\nconst INITIAL_STATE = {\n  comments: [],\n  paging: {},\n  status: '',\n};\n\nexport const createComment = createAsyncThunk(\n  'comment/createComment',\n  async (data) => {\n    const response = await CommentService.createComment(data);\n    return response;\n  },\n);\n\nexport const getCommentByBookId = createAsyncThunk(\n  'comment/fetchCommentByBookId',\n  async (bookId) => {\n    const response = await CommentService.getCommentByBookId(bookId);\n    localStorage.setItem('comments', JSON.stringify(response.data));\n    return response;\n  },\n);\n\nexport const commentSlice = createSlice({\n  name: 'comments',\n  initialState: INITIAL_STATE,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(createComment.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createComment.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.comments.unshift(action.payload.data);\n      })\n      .addCase(getCommentByBookId.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getCommentByBookId.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.comments = action.payload.data;\n      });\n  },\n});\n\nexport default commentSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport bookReducer from '../reducers/bookSlice';\nimport reviewReducer from '../reducers/reviewSlice';\nimport commentReducer from '../reducers/commentSlice';\n\nexport const store = configureStore({\n  reducer: {\n    book: bookReducer,\n    review: reviewReducer,\n    comment: commentReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom/cjs/react-router-dom.min';\n\nimport TimeAgo from 'javascript-time-ago';\n\nimport vn from 'javascript-time-ago/locale/vi';\n\nTimeAgo.addDefaultLocale(vn);\nTimeAgo.addLocale(vn);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename=\"review_book\">\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('app'),\n);\n"],"sourceRoot":""}